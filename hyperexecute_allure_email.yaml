---
version: 0.2
globalTimeout: 400
testSuiteTimeout: 400
testSuiteStep: 400

# Platform configuration
runson: win

# Auto-split configuration
autosplit: true
retryOnFailure: true
maxRetries: 3
concurrency: 4

# Tunnel configuration
tunnel: true

# Environment variables
env:
  LT_USERNAME: ${LT_USERNAME}
  LT_ACCESS_KEY: ${LT_ACCESS_KEY}
  CACHE_DIR: m2_cache_dir
  EMAIL_RECIPIENTS: ${EMAIL_RECIPIENTS:-your-email@example.com}
  SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
  SMTP_PORT: ${SMTP_PORT:-587}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASS: ${SMTP_PASS}

# Cache configuration
cacheKey: '{{ checksum "pom.xml" }}'
cacheDirectories:
  - .m2
  - target

# Pre-execution steps
pre:
  - echo "Setting up test environment with Allure reporting..."
  - mvn -Dmaven.repo.local=./.m2 dependency:resolve
  - mvn clean compile
  - echo "Installing Allure commandline tool..."
  - curl -o allure-2.24.0.zip -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip
  - unzip -q allure-2.24.0.zip
  - export PATH=$PATH:$(pwd)/allure-2.24.0/bin

# Post-execution steps with Allure report generation and email
post:
  - echo "Test execution completed, generating Allure reports..."
  
  # Generate Allure results
  - mvn allure:report
  
  # Generate Allure report
  - allure generate target/allure-results -o target/allure-report --clean
  
  # Create email content
  - echo "Creating email content..."
  - echo "<html><body>" > email_content.html
  - echo "<h2>Test Execution Report</h2>" >> email_content.html
  - echo "<p><strong>Build:</strong> $BUILD_NUMBER</p>" >> email_content.html
  - echo "<p><strong>Environment:</strong> Hyperexecute</p>" >> email_content.html
  - echo "<p><strong>Execution Time:</strong> $(date)</p>" >> email_content.html
  - echo "<p><strong>Test Results:</strong></p>" >> email_content.html
  
  # Extract test results
  - if [ -f "target/surefire-reports/testng-results.xml" ]; then
      echo "<p>Total Tests: $(grep -o 'total="[^"]*"' target/surefire-reports/testng-results.xml | cut -d'"' -f2)</p>" >> email_content.html;
      echo "<p>Passed: $(grep -o 'passed="[^"]*"' target/surefire-reports/testng-results.xml | cut -d'"' -f2)</p>" >> email_content.html;
      echo "<p>Failed: $(grep -o 'failed="[^"]*"' target/surefire-reports/testng-results.xml | cut -d'"' -f2)</p>" >> email_content.html;
      echo "<p>Skipped: $(grep -o 'skipped="[^"]*"' target/surefire-reports/testng-results.xml | cut -d'"' -f2)</p>" >> email_content.html;
    fi
  
  - echo "<p><strong>Allure Report:</strong> <a href='#'>View Detailed Report</a></p>" >> email_content.html
  - echo "<p><strong>Test Artifacts:</strong> Screenshots and logs are attached</p>" >> email_content.html
  - echo "</body></html>" >> email_content.html
  
  # Send email with Allure report
  - echo "Sending email with Allure report..."
  - python3 -c "
import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# Email configuration
smtp_host = os.getenv('SMTP_HOST', 'smtp.gmail.com')
smtp_port = int(os.getenv('SMTP_PORT', '587'))
smtp_user = os.getenv('SMTP_USER')
smtp_pass = os.getenv('SMTP_PASS')
recipients = os.getenv('EMAIL_RECIPIENTS', 'your-email@example.com').split(',')

# Create message
msg = MIMEMultipart()
msg['From'] = smtp_user
msg['To'] = ', '.join(recipients)
msg['Subject'] = 'Test Execution Report - Allure Results'

# Add HTML body
with open('email_content.html', 'r') as f:
    html_content = f.read()
msg.attach(MIMEText(html_content, 'html'))

# Attach Allure report
if os.path.exists('target/allure-report'):
    for root, dirs, files in os.walk('target/allure-report'):
        for file in files:
            filepath = os.path.join(root, file)
            with open(filepath, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition', f'attachment; filename= {file}')
                msg.attach(part)

# Send email
try:
    server = smtplib.SMTP(smtp_host, smtp_port)
    server.starttls()
    server.login(smtp_user, smtp_pass)
    text = msg.as_string()
    server.sendmail(smtp_user, recipients, text)
    server.quit()
    print('Email sent successfully!')
except Exception as e:
    print(f'Failed to send email: {e}')
"

# Artifact collection
mergeArtifacts: true
uploadArtefacts:
  - name: AllureReport
    path:
      - target/allure-report/**
  - name: AllureResults
    path:
      - target/allure-results/**
  - name: TestReports
    path:
      - target/surefire-reports/html/**
      - target/surefire-reports/xml/**
  - name: Screenshots
    path:
      - screenshots/**
  - name: Logs
    path:
      - logs/**

# Reporting configuration
report: true
partialReports:
  location: target/allure-report
  type: html
  frameworkName: allure

# Framework configuration
framework:
  name: maven/testng
  defaultReports: false
  flags:
    - "-Dsuite=parallel.xml"
    - "-Dmaven.repo.local=./.m2"

# Email notification settings
emailNotifications:
  enabled: true
  recipients: $EMAIL_RECIPIENTS
  smtp:
    host: $SMTP_HOST
    port: $SMTP_PORT
    username: $SMTP_USER
    password: $SMTP_PASS
  attachAllureReport: true
  attachScreenshots: true
  attachLogs: true

# Job labeling
jobLabel: [allure-reporting, email-notifications, hyperexecute]

# Notification settings
notifications:
  - type: email
    recipients: $EMAIL_RECIPIENTS
    onSuccess: true
    onFailure: true
    attachReports: true
